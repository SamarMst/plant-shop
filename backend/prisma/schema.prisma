generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  BUYER
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role   @default(BUYER)

  userInfo UserInfo?

  userImage String?

  plant Plant[] @relation("UserPlants")

  userOrders Order[] @relation("UserOrders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInfo {
  name     String
  lastname String
  age      Int
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
}

// Task : make userinfo that have one to one relation with User (crud)
// Task : make plantCategory which have one to many relation with plant (crud)

model PlantCategory {
  id     Int                       @id @default(autoincrement())
  name   String                    @unique
  plants PlantCategoriesOnPlants[]
}

enum PlantType {
  INDOOR
  OUTDOOR
}

model Plant {
  id Int @id @default(autoincrement())

  name       String    @unique
  type       PlantType
  price      Float
  quantity   Int       @default(0)
  stock      Boolean   @default(false)
  plantImage String?

  user   User? @relation("UserPlants", fields: [userId], references: [id])
  userId Int?

  categories PlantCategoriesOnPlants[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlantCategoriesOnPlants {
  plantId         Int
  plantCategoryId Int

  plant         Plant         @relation(fields: [plantId], references: [id])
  plantCategory PlantCategory @relation(fields: [plantCategoryId], references: [id])

  @@id([plantId, plantCategoryId])
}

model Order {
  id        Int         @id @default(autoincrement())
  plant     Plant       @relation(fields: [plantId], references: [id])
  plantId   Int
  quantity  Int
  user      User        @relation("UserOrders", fields: [userId], references: [id])
  userId    Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
